services:
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    network_mode: host
    pid: host
    restart: unless-stopped
    cap_add:
      - SYS_TIME  # Optional: required on some systems for timex collector
    volumes:
      - '/:/host:ro,rslave'
      - ./textfile_collector:/var/lib/node_exporter/textfile_collector:rw
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev)($$|/)'
      - '--collector.loadavg'
      - '--collector.filesystem'
      - '--collector.textfile.directory=/var/lib/node_exporter/textfile_collector'

  prometheus:
    image: prom/prometheus:latest
    ports:
      - '29300:9090'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    deploy:
      restart_policy:
        condition: any
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - '29400:3000'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    deploy:
      restart_policy:
        condition: any
    networks:
      - monitoring

  dcgm-exporter:
    image: nvidia/dcgm-exporter:latest
    container_name: dcgm_exporter
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - '9400:9400'
    restart: unless-stopped
    networks:
      - monitoring

  whoami-exporter:
    image: alpine:latest
    container_name: whoami_exporter
    environment:
      - HOST_USER=${USER}  # Set host user from environment variable
    volumes:
      - ./textfile_collector:/output
    command: /bin/sh -c "while true; do echo \"whoami_info{user=\\\"${HOST_USER}\\\"} 1\" > /output/whoami.prom; sleep 15; done"
    restart: unless-stopped
    networks:
      - monitoring

volumes:
  grafana-data:
  prometheus-data:

networks:
  monitoring:
    driver: bridge
